{
  "elements": [
    {
      "type": "MACRO",
      "name": "DLIB_LOG_DOMAIN",
      "brief": "macro for debug category logging",
      "description": "If DLIB_LOG_DOMAIN is defined the value of the defined is printed after severity.\nOtherwise DEFAULT will be printed.",
      "returnvalues": [],
      "parameters": [],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#define DLIB_LOG_DOMAIN &quot;MyOwnDomain&quot;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;dmsdk/dlib/log.h&gt;</span><span class=\"cp\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogDebug",
      "brief": "log with \"debug\" severity",
      "description": "Debug messages are temporary log instances used when debugging a certain behavior\nUse dmLogOnceDebug for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogUserDebug",
      "brief": "log with \"user\" severity",
      "description": "Debug messages are temporary log instances used when debugging a certain behavior\nUse dmLogOnceUserDebug for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogInfo",
      "brief": "log with \"info\" severity",
      "description": "Info messages are used to inform the developers of relevant information\nUse dmLogOnceInfo for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogWarning",
      "brief": "log with \"warning\" severity",
      "description": "Warning messages are used to inform the developers about potential problems which can cause errors.\nUse dmLogOnceWarning for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogError",
      "brief": "log with \"error\" severity",
      "description": "Error messages are used in cases where an recoverable error has occurred.\nUse dmLogOnceError for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLogFatal",
      "brief": "log with \"fatal\" severity",
      "description": "Fatal messages are used in cases where an unrecoverable error has occurred.\nUse dmLogOnceFatal for one-shot logging",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "format",
          "doc": "Format string",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "args",
          "doc": "Format string args (variable arg list)",
          "types": [
            "..."
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "dmLog::Severity",
      "brief": "Log severity",
      "description": "Log severity",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmLog::LOG_SEVERITY_DEBUG",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmLog::LOG_SEVERITY_USER_DEBUG",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmLog::LOG_SEVERITY_INFO",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmLog::LOG_SEVERITY_WARNING",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmLog::LOG_SEVERITY_ERROR",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmLog::LOG_SEVERITY_FATAL",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "TYPEDEF",
      "name": "dmLog:LogListener",
      "brief": "dmLog:LogListener callback typedef",
      "description": "dmLog listener function type. Provides all logs from dmLog* functions and print/pprint Lua functions.\nUsed with dmLogRegisterListener() and dmLogUnregisterListener()",
      "returnvalues": [],
      "parameters": [
        {
          "name": "severity",
          "doc": "",
          "types": [
            "dmLog::Severity"
          ]
        },
        {
          "name": "domain",
          "doc": "",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "formatted_string",
          "doc": "null terminated string",
          "types": [
            "const char*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLog::RegisterLogListener",
      "brief": "register dmLog listener.",
      "description": "Registers a dmLog listener.\nThis listener recieve logs even in release bundle.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "listener",
          "doc": "",
          "types": [
            "dmLog::LogListener"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLog::UnregisterLogListener",
      "brief": "unregister dmLog listener.",
      "description": "Unregisters a dmLog listener.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "[type:dmLog::LogListener]",
          "doc": "listener",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "dmLog::Setlevel",
      "brief": "set log system severity level.",
      "description": "set log system severity level.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "[type:dmLog::Severity]",
          "doc": "severity",
          "types": [
            ""
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmLog",
    "name": "Log",
    "brief": "logging functions",
    "description": "Logging functions.",
    "path": "engine/dlib/src/dmsdk/dlib/log.h",
    "file": "dmsdk/dlib/log.h",
    "group": "DEFOLD SDK"
  }
}